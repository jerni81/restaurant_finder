{"version":3,"sources":["components/backup.js","components/Form.js","components/Options.js","components/Final.js","components/Main.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["BackupAPI","name","categories","Form","props","handleSubmit","e","preventDefault","makeApiCallYelp","handleChange","setState","value","target","a","source","state","process","shuffle","array","t","i","m","length","Math","floor","random","axios","get","headers","Authorization","response","data","businesses","options","updateOptions","console","log","handleOptions","toOpts","className","onChange","this","placeholder","onClick","React","Component","Options","updateSelected","handleSelected","handleSelection","choice","selected","includes","filtered","filter","restuarant","prevState","toFinal","theOptions","map","d","key","title","theSelected","Final","shuffleIt","select","newSelected","finalChoice","Main","path","render","to","exact","Header","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22e118b0.chunk.js","sourcesContent":["const BackupAPI = [\n  { name: \"Ben Blocker\", categories: \"G\" },\n  { name: \"Dave Defender\", categories: \"D\" },\n  { name: \"Sam Sweeper\", categories: \"D\" },\n  { name: \"Matt Midfielder\", categories: [\"M\", \"j\"] },\n  { name: \"William Winger\", categories: \"M\" },\n  { name: \"William Winger\", categories: \"M\" },\n  { name: \"William Winger\", categories: \"M\" },\n  { name: \"Fillipe Forward\", categories: \"F\" }\n];\n\nexport default BackupAPI;\n","import React from \"react\";\nimport BackupAPI from \"./backup\";\nimport axios from \"axios\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      options: [],\n      toOpts: true\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.makeApiCallYelp();\n\n    // console.log(\"this is submit\", this.state.value);\n  };\n\n  handleChange = e => {\n    // console.log('this is Change');\n    this.setState({\n      value: e.target.value\n    });\n    // console.log(this.state.value);\n  };\n\n  makeApiCallYelp = async () => {\n    let source = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=restaurants&location=${this.state.value}&open_now=true&limit=50`;\n    let key = process.env.REACT_APP_YELP_KEY;\n    try {\n      let response = await axios.get(source, {\n        headers: {\n          Authorization: `Bearer ${key}`\n        }\n      });\n      function shuffle(array) {\n        var m = array.length,\n          t,\n          i;\n        while (m) {\n          i = Math.floor(Math.random() * m--);\n          t = array[m];\n          array[m] = array[i];\n          array[i] = t;\n        }\n        return array;\n      }\n\n      shuffle(response.data.businesses);\n\n      this.setState(\n        {\n          options: response.data.businesses\n        },\n        this.updateOptions\n      );\n      console.log(\"api call\", this.state.options);\n    } catch (err) {\n      console.log(\"this is err\", err);\n      this.setState(\n        {\n          options: BackupAPI\n        },\n        this.updateOptions\n      );\n    }\n  };\n\n  updateOptions = () => {\n    // console.log(this.state);\n    this.props.handleOptions(this.state);\n  };\n\n  render() {\n    return (\n      <form>\n        <h3>Where are you?</h3>\n        <div className=\"formdiv\">\n          <input onChange={this.handleChange} placeholder=\"enter city or zip\" />\n          <br />\n          <button onClick={this.handleSubmit}>Show Me Options</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\n\nclass Options extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: [],\n      toFinal: true,\n      toOpts: false\n    };\n  }\n\n  updateSelected = () => {\n    this.props.handleSelected(this.state);\n  };\n\n  handleSelection = e => {\n    console.log(\"this is selection\", e.target.value);\n    let choice = e.target.value;\n    if (this.state.selected.includes(choice)) {\n      const filtered = this.state.selected.filter(\n        restuarant => restuarant !== choice\n      );\n      this.setState({\n        selected: filtered\n      });\n    } else {\n      this.setState((prevState, props) => ({\n        selected: [...prevState.selected, choice]\n      }));\n    }\n  };\n\n  componentDidUpdate(prevState) {\n    console.log(\"this is compDidUpdate,\", this.state.selected);\n    if (this.state.selected.length === 4 && this.state.toFinal === true) {\n      this.setState({\n        toFinal: false\n      });\n      this.updateSelected();\n    }\n  }\n\n  render() {\n    // console.log(\"this is options page\", this.props.options);\n    console.log(\"this is selected\", this.state.selected);\n\n    const theOptions = this.props.options.map((d, i) => {\n      let selected = this.state.selected.includes(d.name);\n      if (i < 8) {\n        return (\n          <div key={i} className=\"optionDiv\">\n            <h3>{d.name}</h3>\n            <p>{d.categories[0].title}</p>\n            <button\n              onClick={this.handleSelection}\n              value={d.name}\n              className={selected ? \"selected\" : \"\"}\n            >\n              select\n            </button>\n          </div>\n        );\n      }\n    });\n\n    const theSelected = this.state.selected.map((d, i) => {\n      return <div key={i}>{d}</div>;\n    });\n\n    return (\n      <div className=\"optionsContainer\">\n        <div>\n          <h1>Choose 4</h1>\n          <div className=\"optionsDiv\">{theOptions}</div>\n        </div>\n        <div className=\" selectedDiv\">\n          <h1>Selected</h1>\n          <div>{theSelected}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Options;\n\n//shuffle function from https://bost.ocks.org/mike/shuffle/\n","import React from \"react\";\n\nclass Final extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newSelected: []\n    };\n  }\n\n  shuffleIt = () => {\n    function shuffle(array) {\n      var m = array.length,\n        t,\n        i;\n      while (m) {\n        i = Math.floor(Math.random() * m--);\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n      }\n      return array;\n    }\n\n    shuffle(this.props.selected);\n    console.log(this.props.select);\n    this.setState({\n      newSelected: this.props.selected\n    });\n  };\n\n  componentDidMount() {\n    this.shuffleIt();\n  }\n\n  render() {\n    console.log(this.state.newSelected);\n\n    const finalChoice = this.state.newSelected.map((d, i) => {\n      if (i < 1) {\n        return (\n          <div key={i} className=\"finalDiv\">\n            {d}\n          </div>\n        );\n      }\n    });\n\n    return (\n      <div className=\"finalContainer\">\n        <h1>Final</h1>\n        {finalChoice}\n        <h1>Lets Go Eat</h1>\n      </div>\n    );\n  }\n}\n\nexport default Final;\n","import React from \"react\";\nimport Form from \"./Form\";\nimport Options from \"./Options\";\nimport Final from \"./Final\";\n\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: [],\n      toOpts: false,\n      selected: [],\n      toFinal: false\n    };\n  }\n\n  handleOptions = e => {\n    // console.log('this is handleChoices', e);\n    this.setState({\n      options: e.options,\n      toOpts: e.toOpts\n    });\n  };\n\n  handleSelected = e => {\n    // console.log(\"this is handleSelected\", e);\n    this.setState({\n      selected: e.selected,\n      toFinal: e.toFinal,\n      toOpts: e.toOpts\n    });\n  };\n\n  render() {\n    // console.log('this is Main - props', this.props)\n    // console.log(\"this is options\", this.state.options);\n    console.log(\"yo yo \", this.state);\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route\n            path=\"/options\"\n            render={props => {\n              if (this.state.toFinal === true && this.state.toOpts === false) {\n                return <Redirect to=\"/final\" />;\n              } else {\n                return (\n                  <Options\n                    options={this.state.options}\n                    handleSelected={this.handleSelected}\n                  />\n                );\n              }\n            }}\n          />\n          <Route\n            path=\"/final\"\n            render={props => <Final selected={this.state.selected} />}\n          />\n          <Route\n            exact\n            path=\"/\"\n            render={props => {\n              if (this.state.toOpts) {\n                return <Redirect to=\"/options\" />;\n              } else {\n                return <Form handleOptions={this.handleOptions} />;\n              }\n            }}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n\n//Redirect from https://tylermcginnis.com/react-router-programmatically-navigate/\n//handleChange format from https://dev.to/zeyadetman/how-to-pass-state-between-components-in-reactjs-2pg1\n","import React from \"react\";\n\nfunction Header() {\n  return <h1 className=\"header\">Whats for dinner?</h1>;\n}\n\nexport default Header;\n","import React from 'react'\nimport './App.css';\nimport Main from './components/Main'\nimport Header from './components/Header'\n\nfunction App(){\n  return(\n    <React.Fragment>\n    <Header />\n    <Main />\n    </React.Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}